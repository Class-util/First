public class Test7 {
    public static void main(String[] args) {
        String s = "aa";
        String s1 = longestPalindrome(s);
        System.out.println(s1);
    }

    public static String longestPalindrome(String s) {
        //判断字符串是否为空，如果是空则返回空字符串
        if(s==null||s.length()<0){
            return "";
        }
        //定义两个标志star和end，让其分别指向字符串的首尾
        int start = 0;
        int end = 0;
        //定义for循环确定字符串的中心位置
        for (int i = 0; i < s.length(); i++) {
            //定义int类型的len1和len2是其值为函数EXE的返回值，存储的是回文子串的长度
            //字符串为奇数时，中心位置只有一个值，都是i
            int len1 = EXE(s,i,i);
            //字符串为偶数时，中心位置有两个值，为i和i+1
            int len2 = EXE(s,i,i+1);
            //判断最长的回文子串
            int max = Math.max(len1, len2);
            //确定回文字符串开始和结束的索引
            if (max > end - start) {
                start = i - (max-1) / 2;
                end = i + max / 2;
            }
        }
        //生成回文子串
        return s.substring(start, end + 1);
    }

    //定义函数判断字符串是否回文
    public static int EXE (String s , int left , int right){
        int L = left, R = right;
        //使用while循环来判断是否为回文子串，判断的硬性条件为左指针大于等于0，右指针小于字符串的最大长度
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            //如果进入循环说明当前子串被左右指针指向的字符是相同的，接着移动左右指针，继续判断
            L--;
            R++;
        }
        //循环结束，说明回文判断结束，当前两个指针指向位置的中间部分为回文子串
        //将子串长度返回
        //并且将while循环中的l--和r++抵消，使其指向的位置仍旧为传参时指向的位置，求其长度
        return (R-1) - (L+1) + 1;
    }

}

