/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
           ListNode prev = new ListNode(0);
           ListNode cur = prev;
           //记录进位信息
           int num = 0;
           //只要双方有一个还未走完就一直走
           while(l1 != null || l2 != null){
               //如果l1为null，则将它的值变为0
               int x = l1 == null ? 0 : l1.val;
               //如果l2为null，则将它的值变为0
               int y = l2 == null ? 0 : l2.val;
               //l1+l2再加上进位信息num
               int sum = x + y + num;
               //计算进位信息
               num = sum / 10;
               //计算当前值，如果大于10则取余数
               sum = sum % 10;
               cur.next = new ListNode(sum);
               //移动指针
               cur = cur.next;
               //如果l1还能移动，就移动
               if(l1 != null){
                   l1 = l1.next;
               }
               if(l2 != null){
                   l2 = l2.next;
               }
           }
           //判断最后一位是否需要进位
           if(num == 1){
               cur.next = new ListNode(num);
           }
           return prev.next;
    }
}