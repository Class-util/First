/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Deque<TreeNode> queue = new LinkedList<>();
        root.val = 0;
        queue.add(root);
        int max = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            // 队头和队尾的编号值求差用来更新宽度
            max = Math.max(max,queue.getLast().val - queue.getFirst().val + 1);
            // 一次处理一层，进入这个循环前队列中是一层的所有非空节点
            while(size > 0) {
                TreeNode cur = queue.poll();

                // 子节点入队前修改 val, val = 满二叉树中节点编号
                if(cur.left != null) {
                    queue.offer(cur.left);
                    cur.left.val = cur.val * 2 + 1;
                }
                if(cur.right != null) {
                    queue.offer(cur.right);
                    cur.right.val = cur.val * 2 + 2;
                }
                size--;
            }
        }
        return max;
    }
}